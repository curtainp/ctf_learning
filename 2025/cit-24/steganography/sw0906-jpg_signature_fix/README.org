* Description

Deceive you, the bytes do. Look deeper, you must.

* Solution

Cause the hint says =look deeper at bytes=, so let's look at it:

#+begin_example
ctf ❯ hexdump -C -n 100 yoda
00000000  e0 ff d8 ff 46 4a 10 00  01 00 46 49 48 00 01 01  |....FJ....FIH...|
00000010  00 00 48 00 43 00 db ff  07 07 0a 00 0a 06 07 08  |..H.C...........|
00000020  0b 08 08 08 0e 0b 0a 0a  0d 0e 10 18 15 1d 0e 0d  |................|
00000030  23 18 11 16 22 24 25 1f  26 21 22 1f 26 2f 37 2b  |#..."$%.&!".&/7+|
00000040  21 29 34 29 31 41 30 22  3e 3b 39 34 2e 25 3e 3e  |!)4)1A0">;94.%>>|
00000050  3c 43 49 44 3e 3d 37 48  00 db ff 3b 0b 0a 01 43  |<CID>=7H...;...C|
#+end_example
This file signature seems like a =JPG=, but being swaped. following is the normal signature:

#+begin_example
FF D8 FF E0 00 10 4A 46  49 46 00 01 01 01 00 48 
#+end_example

we see that:
1. 4 bytes as a group, swap(0, 3) and swap(1, 2), just reverse it.
2. how to handle if the last part of data not 4 bytes enough? here we try keep as is first.
   
#+begin_src python :results output
#!/usr/bin/env python3

fname = './yoda'
fix_fname = './yoda_fix'

def signature_fix(fname, fix_fname):
    with open(fname, 'rb') as f:
        data = f.read()
        
    fix_chunk = bytearray()
    
    for i in range(0, len(data), 4):
        chunk = data[i:i+4]
        if len(chunk) == 4:
            fix_chunk.extend(reversed(chunk))
        else:
            fix_chunk.extend(chunk)
            
    with open(fix_fname, 'wb') as f:
        f.write(fix_chunk)
        

signature_fix(fname, fix_fname)
#+end_src

After that we will get flag in the fix images:

[[file:yoda_fix]]

