* Description
I've come up with an extremely secure(tm) way to store my password, noone will able to reverse it!
I've hashed it with =md5= 100 times, then =sha256= 100 times, then =sha512= 100 times! There's no way
you're going to be able to undo it. I'll even tell you it was in the =RockYou= database, and the
password is 10 characters long, that's how confident I am. 

As a reminder, please don't flood our infrastructure with guesses.

Hashed password (Flag):

=f600d59a5cdd245a45297079299f2fcd811a8c5461d979f09b73d21b11fbb4f899389e588745c6a9af13749eebbdc2e72336cc57ccf90953e6f9096996a58dcc=

Note: the entire flag (swampCTF{rockyoupassword}) was hashed to get the provided hash, not just rockyoupassword.

* Solution

This challenge is very straightforward. So first we can extract the length equal to 10 of
=rockyou.txt= with:

#+begin_src bash
awk 'length(-zsh) == 10' /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt > rockyou-10.txt
#+end_src

Then, according to the hint says, for loop the dicts, find what we need:
#+begin_src python :results output
#!/usr/bin/env python

import hashlib


def multi_hash(text):
    flag = text.encode()
    for _ in range(100):
        flag = hashlib.md5(flag).digest()

    for _ in range(100):
        flag = hashlib.sha256(flag).digest()

    for _ in range(100):
        flag = hashlib.sha512(flag).digest()
    return flag.hex()

target_hash = "f600d59a5cdd245a45297079299f2fcd811a8c5461d979f09b73d21b11fbb4f899389e588745c6a9af13749eebbdc2e72336cc57ccf90953e6f9096996a58dcc"

def main():
    with open('./rockyou-10.txt', 'r', encoding='latin-1') as f:
        for password in f:
            password = password.strip()
            if len(password) != 10:
                continue
            flag = "swampCTF{" + password + "}"
            flag_hash = multi_hash(flag)
            if flag_hash == target_hash:
                print(f"Found password: {flag}")
                break

if __name__ == '__main__':
    main()
#+end_src

#+RESULTS:
: Found password: swampCTF{secretcode}
