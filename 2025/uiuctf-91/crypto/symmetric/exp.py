h1 = 44626154099651354925697068610752642661842459492769931945027538340211738148995902544351457443643808803963130274930824732652561687395268828472477422919262224
h2 = 516671113554555861164166966331322883848052630063409185414998284127910160310316421085219788291486248715029393774584960034375836715001130337767354512063372620828300201147366138270597133744747341658011663632381219284289144790858167258162656417236910634201286428763727072739569460623482985066956478781223378673732
h3 = 6147718474663450187001867904227777991349731066494841442199681943204194617136760567222545181562592364728655444222576167723225771866335920325045525027985716792468801076590684892140052786942251780392395274059384743594570343510311801194684613435002073956759521242578078411431891501758484581445964234548107005826532945720412531638919892681259687552977883437895032963223761216846303917338652743754915155934118353066174102436448393348040719582422022713292561416343278608
N = 14184841414933523698606245433393907034474143715949896731683874356940146602876788990832087413915033843120975580859113356518777762025417525571528638829956003882418585702756644491932279294535883798799580861254646149745925137179207140600356428758736111639677698862407787386573263961111978517446397007747429416079059195916290615125084899002162504424765939524455434579218079962808920072946861658695379491917567048202142417165204141307476222251547098848515065051745905180788313450494477967398727631152936238366581978379130450660235139256967936160718128731512409111209840405772933034600016694225294481603355934917366484109057
ct = 720607330561370237459911161481490697044029472780348552630924063963226757984368356580217337982783395620115957442082471977614781910209933696251479615689667675958354681196823652299435457532944189300223816303315625302472302494905575910600277892375951366031061219173465155686586206246661009612156094695841741309002508535764511343569015518587247600796520847856011377777228749182958947015029731456117404560626347774985507275302882865400315045173501559082431672490227728580592379740508214726249635835834752208899970446910850569489282065524329936561486377823093465841715608716032843259935185417766702677708267102415636848129

e = 65537

import sympy
from Crypto.Util.number import long_to_bytes

e1 = h1
e2 = (h1 * e1 - h2) // 2
e3 = (e2 * h1 - e1 * h2 + h3) // 3
e4 = N

print(f"[+] e1 = {e1}")
print(f"[+] e2 = {e2}")
print(f"[+] e3 = {e3}")
print(f"[+] e4 = {e4}")

# Step 2: Find the roots using sympy for arbitrary precision
x = sympy.Symbol("x")
# Construct the polynomial expression
P = x**4 - e1 * x**3 + e2 * x**2 - e3 * x + e4

# Use sympy's nroots to find numerical roots with high precision
# This avoids the float overflow error
roots = sympy.nroots(P)

p = int(round(roots[0]))
q = int(round(roots[1]))
r = int(round(roots[2]))
s = int(round(roots[3]))

print("Found primes:")
print(f"p = {p}")
print(f"q = {q}")
print(f"r = {r}")
print(f"s = {s}")

assert p * q * r * s == N

phi_N = (p - 1) * (q - 1) * (r - 1) * (s - 1)

# Compute private exponent
d = pow(e, -1, phi_N)

# Decrypt ciphertext
pt = pow(ct, d, N)
flag = long_to_bytes(pt)

print(f"[+] FLAG: {flag.decode()}")
