from Crypto.Util.number import long_to_bytes, bytes_to_long
from math import isqrt

N = 85494791395295332945307239533692379607357839212287019473638934253301452108522067416218735796494842928689545564411909493378925446256067741352255455231566967041733698260315140928382934156213563527493360928094724419798812564716724034316384416100417243844799045176599197680353109658153148874265234750977838548867
c1 = 27062074196834458670191422120857456217979308440332928563784961101978948466368298802765973020349433121726736536899260504828388992133435359919764627760887966221328744451867771955587357887373143789000307996739905387064272569624412963289163997701702446706106089751532607059085577031825157942847678226256408018301
c2 = 30493926769307279620402715377825804330944677680927170388776891152831425786788516825687413453427866619728035923364764078434617853754697076732657422609080720944160407383110441379382589644898380399280520469116924641442283645426172683945640914810778133226061767682464112690072473051344933447823488551784450844649

e = bytes_to_long(b"idek{this_is_a_fake_flag_lolol}")

# Brute force small k to find sqrt(c2 + k*N)
MAX_K = 50000  # Adjust as needed

for k in range(MAX_K):
    candidate = c2 + k * N
    sqrt_candidate = isqrt(candidate)
    if (sqrt_candidate * sqrt_candidate) % N == c2:
        print(f"[+] Potential remain_bytes found at k={k}")
        # Verify with c1
        if pow(sqrt_candidate, e, N) == c1:
            print("[+] Correct remain_bytes found!")
            remain_bytes = long_to_bytes(sqrt_candidate)
            print(remain_bytes)
            break
else:
    print("[-] Failed to find remain_bytes within given range of k")
